// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nama/nama/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryNamaAdminRequest struct {
}

func (m *QueryNamaAdminRequest) Reset()         { *m = QueryNamaAdminRequest{} }
func (m *QueryNamaAdminRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNamaAdminRequest) ProtoMessage()    {}
func (*QueryNamaAdminRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{2}
}
func (m *QueryNamaAdminRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaAdminRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaAdminRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaAdminRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaAdminRequest.Merge(m, src)
}
func (m *QueryNamaAdminRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaAdminRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaAdminRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaAdminRequest proto.InternalMessageInfo

type QueryNamaAdminResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryNamaAdminResponse) Reset()         { *m = QueryNamaAdminResponse{} }
func (m *QueryNamaAdminResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNamaAdminResponse) ProtoMessage()    {}
func (*QueryNamaAdminResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{3}
}
func (m *QueryNamaAdminResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaAdminResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaAdminResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaAdminResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaAdminResponse.Merge(m, src)
}
func (m *QueryNamaAdminResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaAdminResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaAdminResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaAdminResponse proto.InternalMessageInfo

func (m *QueryNamaAdminResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type QueryNamaCostRequest struct {
}

func (m *QueryNamaCostRequest) Reset()         { *m = QueryNamaCostRequest{} }
func (m *QueryNamaCostRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNamaCostRequest) ProtoMessage()    {}
func (*QueryNamaCostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{4}
}
func (m *QueryNamaCostRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaCostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaCostRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaCostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaCostRequest.Merge(m, src)
}
func (m *QueryNamaCostRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaCostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaCostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaCostRequest proto.InternalMessageInfo

type QueryNamaCostResponse struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryNamaCostResponse) Reset()         { *m = QueryNamaCostResponse{} }
func (m *QueryNamaCostResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNamaCostResponse) ProtoMessage()    {}
func (*QueryNamaCostResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{5}
}
func (m *QueryNamaCostResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaCostResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaCostResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaCostResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaCostResponse.Merge(m, src)
}
func (m *QueryNamaCostResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaCostResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaCostResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaCostResponse proto.InternalMessageInfo

func (m *QueryNamaCostResponse) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type QueryTotalNamaRequest struct {
}

func (m *QueryTotalNamaRequest) Reset()         { *m = QueryTotalNamaRequest{} }
func (m *QueryTotalNamaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalNamaRequest) ProtoMessage()    {}
func (*QueryTotalNamaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{6}
}
func (m *QueryTotalNamaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalNamaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalNamaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalNamaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalNamaRequest.Merge(m, src)
}
func (m *QueryTotalNamaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalNamaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalNamaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalNamaRequest proto.InternalMessageInfo

type QueryTotalNamaResponse struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryTotalNamaResponse) Reset()         { *m = QueryTotalNamaResponse{} }
func (m *QueryTotalNamaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalNamaResponse) ProtoMessage()    {}
func (*QueryTotalNamaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{7}
}
func (m *QueryTotalNamaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalNamaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalNamaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalNamaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalNamaResponse.Merge(m, src)
}
func (m *QueryTotalNamaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalNamaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalNamaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalNamaResponse proto.InternalMessageInfo

func (m *QueryTotalNamaResponse) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type QueryUserNamaBalanceRequest struct {
	UserAddress string `protobuf:"bytes,1,opt,name=userAddress,proto3" json:"userAddress,omitempty"`
}

func (m *QueryUserNamaBalanceRequest) Reset()         { *m = QueryUserNamaBalanceRequest{} }
func (m *QueryUserNamaBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserNamaBalanceRequest) ProtoMessage()    {}
func (*QueryUserNamaBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{8}
}
func (m *QueryUserNamaBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserNamaBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserNamaBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserNamaBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserNamaBalanceRequest.Merge(m, src)
}
func (m *QueryUserNamaBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserNamaBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserNamaBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserNamaBalanceRequest proto.InternalMessageInfo

func (m *QueryUserNamaBalanceRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

type QueryUserNamaBalanceResponse struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *QueryUserNamaBalanceResponse) Reset()         { *m = QueryUserNamaBalanceResponse{} }
func (m *QueryUserNamaBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserNamaBalanceResponse) ProtoMessage()    {}
func (*QueryUserNamaBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{9}
}
func (m *QueryUserNamaBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserNamaBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserNamaBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserNamaBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserNamaBalanceResponse.Merge(m, src)
}
func (m *QueryUserNamaBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserNamaBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserNamaBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserNamaBalanceResponse proto.InternalMessageInfo

func (m *QueryUserNamaBalanceResponse) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type QueryNamaDataRequest struct {
	NamaId uint64 `protobuf:"varint,1,opt,name=namaId,proto3" json:"namaId,omitempty"`
}

func (m *QueryNamaDataRequest) Reset()         { *m = QueryNamaDataRequest{} }
func (m *QueryNamaDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNamaDataRequest) ProtoMessage()    {}
func (*QueryNamaDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{10}
}
func (m *QueryNamaDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaDataRequest.Merge(m, src)
}
func (m *QueryNamaDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaDataRequest proto.InternalMessageInfo

func (m *QueryNamaDataRequest) GetNamaId() uint64 {
	if m != nil {
		return m.NamaId
	}
	return 0
}

type QueryNamaDataResponse struct {
	Data *NamaData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *QueryNamaDataResponse) Reset()         { *m = QueryNamaDataResponse{} }
func (m *QueryNamaDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNamaDataResponse) ProtoMessage()    {}
func (*QueryNamaDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{11}
}
func (m *QueryNamaDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaDataResponse.Merge(m, src)
}
func (m *QueryNamaDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaDataResponse proto.InternalMessageInfo

func (m *QueryNamaDataResponse) GetData() *NamaData {
	if m != nil {
		return m.Data
	}
	return nil
}

type QueryNamaIdRequest struct {
	Nama string `protobuf:"bytes,1,opt,name=nama,proto3" json:"nama,omitempty"`
}

func (m *QueryNamaIdRequest) Reset()         { *m = QueryNamaIdRequest{} }
func (m *QueryNamaIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNamaIdRequest) ProtoMessage()    {}
func (*QueryNamaIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{12}
}
func (m *QueryNamaIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaIdRequest.Merge(m, src)
}
func (m *QueryNamaIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaIdRequest proto.InternalMessageInfo

func (m *QueryNamaIdRequest) GetNama() string {
	if m != nil {
		return m.Nama
	}
	return ""
}

type QueryNamaIdResponse struct {
	NamaId uint64 `protobuf:"varint,1,opt,name=namaId,proto3" json:"namaId,omitempty"`
}

func (m *QueryNamaIdResponse) Reset()         { *m = QueryNamaIdResponse{} }
func (m *QueryNamaIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNamaIdResponse) ProtoMessage()    {}
func (*QueryNamaIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_11941afb5060ca34, []int{13}
}
func (m *QueryNamaIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNamaIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNamaIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNamaIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNamaIdResponse.Merge(m, src)
}
func (m *QueryNamaIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNamaIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNamaIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNamaIdResponse proto.InternalMessageInfo

func (m *QueryNamaIdResponse) GetNamaId() uint64 {
	if m != nil {
		return m.NamaId
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "nama.nama.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "nama.nama.QueryParamsResponse")
	proto.RegisterType((*QueryNamaAdminRequest)(nil), "nama.nama.QueryNamaAdminRequest")
	proto.RegisterType((*QueryNamaAdminResponse)(nil), "nama.nama.QueryNamaAdminResponse")
	proto.RegisterType((*QueryNamaCostRequest)(nil), "nama.nama.QueryNamaCostRequest")
	proto.RegisterType((*QueryNamaCostResponse)(nil), "nama.nama.QueryNamaCostResponse")
	proto.RegisterType((*QueryTotalNamaRequest)(nil), "nama.nama.QueryTotalNamaRequest")
	proto.RegisterType((*QueryTotalNamaResponse)(nil), "nama.nama.QueryTotalNamaResponse")
	proto.RegisterType((*QueryUserNamaBalanceRequest)(nil), "nama.nama.QueryUserNamaBalanceRequest")
	proto.RegisterType((*QueryUserNamaBalanceResponse)(nil), "nama.nama.QueryUserNamaBalanceResponse")
	proto.RegisterType((*QueryNamaDataRequest)(nil), "nama.nama.QueryNamaDataRequest")
	proto.RegisterType((*QueryNamaDataResponse)(nil), "nama.nama.QueryNamaDataResponse")
	proto.RegisterType((*QueryNamaIdRequest)(nil), "nama.nama.QueryNamaIdRequest")
	proto.RegisterType((*QueryNamaIdResponse)(nil), "nama.nama.QueryNamaIdResponse")
}

func init() { proto.RegisterFile("nama/nama/query.proto", fileDescriptor_11941afb5060ca34) }

var fileDescriptor_11941afb5060ca34 = []byte{
	// 599 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x3d, 0x6f, 0xd3, 0x50,
	0x14, 0x8d, 0x51, 0x6a, 0x91, 0xdb, 0x01, 0xe5, 0xe5, 0x83, 0xe2, 0x06, 0x37, 0x78, 0xa0, 0x15,
	0xa8, 0xb6, 0x5a, 0xd8, 0xa1, 0x01, 0x21, 0xb1, 0x54, 0x10, 0xc1, 0xc2, 0x76, 0xd3, 0x3c, 0x45,
	0x41, 0x89, 0x9f, 0xeb, 0x67, 0x57, 0x74, 0x65, 0x60, 0xae, 0xc4, 0x9f, 0xea, 0x58, 0x89, 0x85,
	0x09, 0xa1, 0x84, 0x1f, 0x82, 0xde, 0x87, 0xdd, 0x17, 0xdb, 0x49, 0x17, 0xcb, 0xbe, 0xf7, 0xe4,
	0x9c, 0xfb, 0x71, 0x6e, 0xa0, 0x13, 0xe2, 0x1c, 0x03, 0xf9, 0x38, 0x4f, 0x69, 0x7c, 0xe9, 0x47,
	0x31, 0x4b, 0x18, 0x69, 0x88, 0x88, 0x2f, 0x1e, 0x4e, 0x7b, 0xc2, 0x26, 0x4c, 0x46, 0x03, 0xf1,
	0xa6, 0x00, 0x4e, 0x6f, 0xc2, 0xd8, 0x64, 0x46, 0x03, 0x8c, 0xa6, 0x01, 0x86, 0x21, 0x4b, 0x30,
	0x99, 0xb2, 0x90, 0xeb, 0xec, 0xb3, 0x33, 0xc6, 0xe7, 0x8c, 0x07, 0x23, 0xe4, 0x54, 0xf1, 0x06,
	0x17, 0x47, 0x23, 0x9a, 0xe0, 0x51, 0x10, 0xe1, 0x64, 0x1a, 0x4a, 0xb0, 0xc6, 0x76, 0x6f, 0x2b,
	0x88, 0x30, 0xc6, 0x79, 0xc6, 0xb1, 0x73, 0x1b, 0x17, 0x8f, 0xb7, 0x98, 0xa0, 0xca, 0x78, 0x6d,
	0x20, 0x1f, 0x05, 0xe7, 0x07, 0x09, 0x1f, 0xd2, 0xf3, 0x94, 0xf2, 0xc4, 0x7b, 0x07, 0xad, 0x95,
	0x28, 0x8f, 0x58, 0xc8, 0x29, 0x09, 0xc0, 0x56, 0xb4, 0x3b, 0x56, 0xdf, 0x3a, 0xd8, 0x3e, 0x6e,
	0xfa, 0x79, 0x6b, 0xbe, 0x82, 0x0e, 0xea, 0xd7, 0x7f, 0xf6, 0x6a, 0x43, 0x0d, 0xf3, 0x1e, 0x42,
	0x47, 0xf2, 0x9c, 0xe2, 0x1c, 0x4f, 0xc6, 0xf3, 0x69, 0x98, 0x09, 0xf8, 0xd0, 0x2d, 0x26, 0xb4,
	0x46, 0x1b, 0xb6, 0x2e, 0x70, 0x96, 0x52, 0x29, 0xd1, 0x18, 0xaa, 0x0f, 0xaf, 0x0b, 0xed, 0x1c,
	0xff, 0x86, 0xf1, 0x24, 0xe3, 0x39, 0x34, 0x04, 0x54, 0xbc, 0x8a, 0xa6, 0x9e, 0xd1, 0x64, 0xf5,
	0x7c, 0x62, 0x09, 0xce, 0xc4, 0x6f, 0x8a, 0xf5, 0x18, 0x89, 0x8d, 0x44, 0xaf, 0x60, 0x57, 0xe2,
	0x3f, 0x73, 0x1a, 0x0b, 0xf8, 0x00, 0x67, 0x18, 0x9e, 0x51, 0x4d, 0x47, 0xfa, 0xb0, 0x9d, 0x72,
	0x1a, 0x9f, 0x8c, 0xc7, 0x31, 0xe5, 0x5c, 0xb7, 0x62, 0x86, 0xbc, 0x97, 0xd0, 0xab, 0x26, 0xd8,
	0x28, 0xeb, 0x1b, 0x63, 0x10, 0x4b, 0xcc, 0xf4, 0xba, 0x60, 0x8b, 0x25, 0xbc, 0x1f, 0x6b, 0xb8,
	0xfe, 0xf2, 0x5e, 0x1b, 0xe3, 0x51, 0x78, 0x4d, 0xbf, 0x0f, 0xf5, 0x31, 0x26, 0xa8, 0xf7, 0xd8,
	0x32, 0xf6, 0x98, 0x43, 0x25, 0xc0, 0x3b, 0xd0, 0xfe, 0x38, 0x95, 0x84, 0x99, 0x1e, 0x81, 0xba,
	0x00, 0xeb, 0xc6, 0xe4, 0xbb, 0x77, 0xa8, 0x3d, 0x93, 0x21, 0xb5, 0xd2, 0x9a, 0xd2, 0x8e, 0xaf,
	0x6c, 0xd8, 0x92, 0x78, 0x32, 0x02, 0x5b, 0x99, 0x87, 0x3c, 0x36, 0xea, 0x28, 0xbb, 0xd2, 0x71,
	0xd7, 0xa5, 0x95, 0x94, 0xf7, 0xe8, 0xfb, 0xaf, 0x7f, 0x3f, 0xef, 0xb5, 0x48, 0x33, 0x28, 0x9e,
	0x01, 0x09, 0xa1, 0x91, 0x5b, 0x8d, 0xf4, 0x8b, 0x3c, 0x45, 0x7b, 0x3a, 0x4f, 0x36, 0x20, 0xb4,
	0x58, 0x4f, 0x8a, 0x75, 0x49, 0x3b, 0x58, 0xbd, 0x2d, 0x25, 0xf1, 0x15, 0xee, 0x67, 0x96, 0x24,
	0x7b, 0x55, 0x64, 0x86, 0x89, 0x9d, 0xfe, 0x7a, 0x80, 0x16, 0xdb, 0x95, 0x62, 0x1d, 0xd2, 0x2a,
	0x88, 0x49, 0xfe, 0x10, 0x1a, 0xb9, 0x6d, 0xcb, 0xbd, 0x15, 0xad, 0x5e, 0xee, 0xad, 0xe4, 0xf9,
	0xca, 0xde, 0x92, 0x5c, 0xe2, 0x87, 0x05, 0x0f, 0x0a, 0xb6, 0x25, 0x4f, 0x8b, 0xa4, 0xd5, 0x87,
	0xe1, 0xec, 0xdf, 0x89, 0xd3, 0x25, 0x78, 0xb2, 0x84, 0x1e, 0x71, 0x8c, 0x12, 0xd2, 0x82, 0xa8,
	0x1e, 0xb2, 0x70, 0x6b, 0xf5, 0x90, 0x8d, 0x13, 0xa9, 0x1e, 0xb2, 0x79, 0x13, 0x6b, 0x87, 0x2c,
	0xf9, 0x47, 0x60, 0x2b, 0x63, 0x97, 0x4d, 0xba, 0x72, 0x1a, 0x65, 0x93, 0xae, 0xde, 0x43, 0xa5,
	0x49, 0xd5, 0x49, 0x0c, 0x9e, 0x5f, 0x2f, 0x5c, 0xeb, 0x66, 0xe1, 0x5a, 0x7f, 0x17, 0xae, 0x75,
	0xb5, 0x74, 0x6b, 0x37, 0x4b, 0xb7, 0xf6, 0x7b, 0xe9, 0xd6, 0xbe, 0x34, 0x25, 0xec, 0x9b, 0xde,
	0xc4, 0x65, 0x44, 0xf9, 0xc8, 0x96, 0xff, 0xdf, 0x2f, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x04,
	0xa2, 0x77, 0xa5, 0x75, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	NamaAdmin(ctx context.Context, in *QueryNamaAdminRequest, opts ...grpc.CallOption) (*QueryNamaAdminResponse, error)
	NamaCost(ctx context.Context, in *QueryNamaCostRequest, opts ...grpc.CallOption) (*QueryNamaCostResponse, error)
	TotalNama(ctx context.Context, in *QueryTotalNamaRequest, opts ...grpc.CallOption) (*QueryTotalNamaResponse, error)
	UserNamaBalance(ctx context.Context, in *QueryUserNamaBalanceRequest, opts ...grpc.CallOption) (*QueryUserNamaBalanceResponse, error)
	NamaData(ctx context.Context, in *QueryNamaDataRequest, opts ...grpc.CallOption) (*QueryNamaDataResponse, error)
	NamaId(ctx context.Context, in *QueryNamaIdRequest, opts ...grpc.CallOption) (*QueryNamaIdResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NamaAdmin(ctx context.Context, in *QueryNamaAdminRequest, opts ...grpc.CallOption) (*QueryNamaAdminResponse, error) {
	out := new(QueryNamaAdminResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/NamaAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NamaCost(ctx context.Context, in *QueryNamaCostRequest, opts ...grpc.CallOption) (*QueryNamaCostResponse, error) {
	out := new(QueryNamaCostResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/NamaCost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalNama(ctx context.Context, in *QueryTotalNamaRequest, opts ...grpc.CallOption) (*QueryTotalNamaResponse, error) {
	out := new(QueryTotalNamaResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/TotalNama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserNamaBalance(ctx context.Context, in *QueryUserNamaBalanceRequest, opts ...grpc.CallOption) (*QueryUserNamaBalanceResponse, error) {
	out := new(QueryUserNamaBalanceResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/UserNamaBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NamaData(ctx context.Context, in *QueryNamaDataRequest, opts ...grpc.CallOption) (*QueryNamaDataResponse, error) {
	out := new(QueryNamaDataResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/NamaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NamaId(ctx context.Context, in *QueryNamaIdRequest, opts ...grpc.CallOption) (*QueryNamaIdResponse, error) {
	out := new(QueryNamaIdResponse)
	err := c.cc.Invoke(ctx, "/nama.nama.Query/NamaId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	NamaAdmin(context.Context, *QueryNamaAdminRequest) (*QueryNamaAdminResponse, error)
	NamaCost(context.Context, *QueryNamaCostRequest) (*QueryNamaCostResponse, error)
	TotalNama(context.Context, *QueryTotalNamaRequest) (*QueryTotalNamaResponse, error)
	UserNamaBalance(context.Context, *QueryUserNamaBalanceRequest) (*QueryUserNamaBalanceResponse, error)
	NamaData(context.Context, *QueryNamaDataRequest) (*QueryNamaDataResponse, error)
	NamaId(context.Context, *QueryNamaIdRequest) (*QueryNamaIdResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) NamaAdmin(ctx context.Context, req *QueryNamaAdminRequest) (*QueryNamaAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamaAdmin not implemented")
}
func (*UnimplementedQueryServer) NamaCost(ctx context.Context, req *QueryNamaCostRequest) (*QueryNamaCostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamaCost not implemented")
}
func (*UnimplementedQueryServer) TotalNama(ctx context.Context, req *QueryTotalNamaRequest) (*QueryTotalNamaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalNama not implemented")
}
func (*UnimplementedQueryServer) UserNamaBalance(ctx context.Context, req *QueryUserNamaBalanceRequest) (*QueryUserNamaBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserNamaBalance not implemented")
}
func (*UnimplementedQueryServer) NamaData(ctx context.Context, req *QueryNamaDataRequest) (*QueryNamaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamaData not implemented")
}
func (*UnimplementedQueryServer) NamaId(ctx context.Context, req *QueryNamaIdRequest) (*QueryNamaIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamaId not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NamaAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNamaAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NamaAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/NamaAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NamaAdmin(ctx, req.(*QueryNamaAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NamaCost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNamaCostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NamaCost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/NamaCost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NamaCost(ctx, req.(*QueryNamaCostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalNama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalNamaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalNama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/TotalNama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalNama(ctx, req.(*QueryTotalNamaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserNamaBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserNamaBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserNamaBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/UserNamaBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserNamaBalance(ctx, req.(*QueryUserNamaBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NamaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNamaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NamaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/NamaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NamaData(ctx, req.(*QueryNamaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NamaId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNamaIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NamaId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nama.nama.Query/NamaId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NamaId(ctx, req.(*QueryNamaIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nama.nama.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "NamaAdmin",
			Handler:    _Query_NamaAdmin_Handler,
		},
		{
			MethodName: "NamaCost",
			Handler:    _Query_NamaCost_Handler,
		},
		{
			MethodName: "TotalNama",
			Handler:    _Query_TotalNama_Handler,
		},
		{
			MethodName: "UserNamaBalance",
			Handler:    _Query_UserNamaBalance_Handler,
		},
		{
			MethodName: "NamaData",
			Handler:    _Query_NamaData_Handler,
		},
		{
			MethodName: "NamaId",
			Handler:    _Query_NamaId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nama/nama/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNamaAdminRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaAdminRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaAdminRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNamaAdminResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaAdminResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaAdminResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNamaCostRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaCostRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaCostRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNamaCostResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaCostResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaCostResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalNamaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalNamaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalNamaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalNamaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalNamaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalNamaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserNamaBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserNamaBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserNamaBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserNamaBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserNamaBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserNamaBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNamaDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NamaId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NamaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNamaDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNamaIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nama) > 0 {
		i -= len(m.Nama)
		copy(dAtA[i:], m.Nama)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Nama)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNamaIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNamaIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNamaIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NamaId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NamaId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNamaAdminRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNamaAdminResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNamaCostRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNamaCostResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	return n
}

func (m *QueryTotalNamaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalNamaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	return n
}

func (m *QueryUserNamaBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserNamaBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovQuery(uint64(m.Value))
	}
	return n
}

func (m *QueryNamaDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamaId != 0 {
		n += 1 + sovQuery(uint64(m.NamaId))
	}
	return n
}

func (m *QueryNamaDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNamaIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nama)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNamaIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NamaId != 0 {
		n += 1 + sovQuery(uint64(m.NamaId))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaAdminRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaAdminRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaAdminRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaAdminResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaAdminResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaAdminResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaCostRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaCostRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaCostRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaCostResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaCostResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaCostResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalNamaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalNamaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalNamaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalNamaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalNamaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalNamaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserNamaBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserNamaBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserNamaBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserNamaBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserNamaBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserNamaBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamaId", wireType)
			}
			m.NamaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &NamaData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nama", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nama = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNamaIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNamaIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNamaIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamaId", wireType)
			}
			m.NamaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
