// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nama/nama/namaData.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NamaAdmin struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NamaAdmin) Reset()         { *m = NamaAdmin{} }
func (m *NamaAdmin) String() string { return proto.CompactTextString(m) }
func (*NamaAdmin) ProtoMessage()    {}
func (*NamaAdmin) Descriptor() ([]byte, []int) {
	return fileDescriptor_973e0e0d02ed6ad3, []int{0}
}
func (m *NamaAdmin) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamaAdmin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamaAdmin.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamaAdmin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamaAdmin.Merge(m, src)
}
func (m *NamaAdmin) XXX_Size() int {
	return m.Size()
}
func (m *NamaAdmin) XXX_DiscardUnknown() {
	xxx_messageInfo_NamaAdmin.DiscardUnknown(m)
}

var xxx_messageInfo_NamaAdmin proto.InternalMessageInfo

func (m *NamaAdmin) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type NamaData struct {
	Nama        string `protobuf:"bytes,1,opt,name=nama,proto3" json:"nama,omitempty"`
	Owner       string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	PurchasedIn uint64 `protobuf:"varint,3,opt,name=purchasedIn,proto3" json:"purchasedIn,omitempty"`
}

func (m *NamaData) Reset()         { *m = NamaData{} }
func (m *NamaData) String() string { return proto.CompactTextString(m) }
func (*NamaData) ProtoMessage()    {}
func (*NamaData) Descriptor() ([]byte, []int) {
	return fileDescriptor_973e0e0d02ed6ad3, []int{1}
}
func (m *NamaData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamaData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamaData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamaData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamaData.Merge(m, src)
}
func (m *NamaData) XXX_Size() int {
	return m.Size()
}
func (m *NamaData) XXX_DiscardUnknown() {
	xxx_messageInfo_NamaData.DiscardUnknown(m)
}

var xxx_messageInfo_NamaData proto.InternalMessageInfo

func (m *NamaData) GetNama() string {
	if m != nil {
		return m.Nama
	}
	return ""
}

func (m *NamaData) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *NamaData) GetPurchasedIn() uint64 {
	if m != nil {
		return m.PurchasedIn
	}
	return 0
}

type NamaId struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NamaId) Reset()         { *m = NamaId{} }
func (m *NamaId) String() string { return proto.CompactTextString(m) }
func (*NamaId) ProtoMessage()    {}
func (*NamaId) Descriptor() ([]byte, []int) {
	return fileDescriptor_973e0e0d02ed6ad3, []int{2}
}
func (m *NamaId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamaId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamaId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamaId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamaId.Merge(m, src)
}
func (m *NamaId) XXX_Size() int {
	return m.Size()
}
func (m *NamaId) XXX_DiscardUnknown() {
	xxx_messageInfo_NamaId.DiscardUnknown(m)
}

var xxx_messageInfo_NamaId proto.InternalMessageInfo

func (m *NamaId) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type TotalNama struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *TotalNama) Reset()         { *m = TotalNama{} }
func (m *TotalNama) String() string { return proto.CompactTextString(m) }
func (*TotalNama) ProtoMessage()    {}
func (*TotalNama) Descriptor() ([]byte, []int) {
	return fileDescriptor_973e0e0d02ed6ad3, []int{3}
}
func (m *TotalNama) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalNama) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalNama.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalNama) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalNama.Merge(m, src)
}
func (m *TotalNama) XXX_Size() int {
	return m.Size()
}
func (m *TotalNama) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalNama.DiscardUnknown(m)
}

var xxx_messageInfo_TotalNama proto.InternalMessageInfo

func (m *TotalNama) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type NamaReserveCost struct {
	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *NamaReserveCost) Reset()         { *m = NamaReserveCost{} }
func (m *NamaReserveCost) String() string { return proto.CompactTextString(m) }
func (*NamaReserveCost) ProtoMessage()    {}
func (*NamaReserveCost) Descriptor() ([]byte, []int) {
	return fileDescriptor_973e0e0d02ed6ad3, []int{4}
}
func (m *NamaReserveCost) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NamaReserveCost) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NamaReserveCost.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NamaReserveCost) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamaReserveCost.Merge(m, src)
}
func (m *NamaReserveCost) XXX_Size() int {
	return m.Size()
}
func (m *NamaReserveCost) XXX_DiscardUnknown() {
	xxx_messageInfo_NamaReserveCost.DiscardUnknown(m)
}

var xxx_messageInfo_NamaReserveCost proto.InternalMessageInfo

func (m *NamaReserveCost) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func init() {
	proto.RegisterType((*NamaAdmin)(nil), "nama.nama.NamaAdmin")
	proto.RegisterType((*NamaData)(nil), "nama.nama.NamaData")
	proto.RegisterType((*NamaId)(nil), "nama.nama.NamaId")
	proto.RegisterType((*TotalNama)(nil), "nama.nama.TotalNama")
	proto.RegisterType((*NamaReserveCost)(nil), "nama.nama.NamaReserveCost")
}

func init() { proto.RegisterFile("nama/nama/namaData.proto", fileDescriptor_973e0e0d02ed6ad3) }

var fileDescriptor_973e0e0d02ed6ad3 = []byte{
	// 224 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc8, 0x4b, 0xcc, 0x4d,
	0xd4, 0x87, 0x13, 0x2e, 0x89, 0x25, 0x89, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x9c, 0x20,
	0xbe, 0x1e, 0x88, 0x50, 0x52, 0xe4, 0xe2, 0xf4, 0x4b, 0xcc, 0x4d, 0x74, 0x4c, 0xc9, 0xcd, 0xcc,
	0x13, 0x12, 0xe1, 0x62, 0x2d, 0x4b, 0xcc, 0x29, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x82, 0x70, 0x94, 0xc2, 0xb8, 0x38, 0xfc, 0xa0, 0xfa, 0x85, 0x84, 0xb8, 0x58, 0x40, 0xda, 0xa0,
	0x0a, 0xc0, 0x6c, 0x90, 0xae, 0xfc, 0xf2, 0xbc, 0xd4, 0x22, 0x09, 0x26, 0x88, 0x2e, 0x30, 0x47,
	0x48, 0x81, 0x8b, 0xbb, 0xa0, 0xb4, 0x28, 0x39, 0x23, 0xb1, 0x38, 0x35, 0xc5, 0x33, 0x4f, 0x82,
	0x59, 0x81, 0x51, 0x83, 0x25, 0x08, 0x59, 0x48, 0x49, 0x8e, 0x8b, 0x0d, 0x64, 0xae, 0x67, 0x0a,
	0xaa, 0xbd, 0x2c, 0x30, 0x7b, 0x15, 0xb9, 0x38, 0x43, 0xf2, 0x4b, 0x12, 0x73, 0xfc, 0xa0, 0x96,
	0x60, 0x51, 0xa2, 0xce, 0xc5, 0x0f, 0x92, 0x0d, 0x4a, 0x2d, 0x4e, 0x2d, 0x2a, 0x4b, 0x75, 0xce,
	0x2f, 0x2e, 0xc1, 0xae, 0xd0, 0x49, 0xfb, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f,
	0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18,
	0xa2, 0x04, 0xc1, 0x01, 0x54, 0x01, 0x09, 0xa7, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0x70,
	0x28, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x91, 0xf9, 0x82, 0x9e, 0x41, 0x01, 0x00, 0x00,
}

func (m *NamaAdmin) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamaAdmin) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamaAdmin) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintNamaData(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamaData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamaData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamaData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PurchasedIn != 0 {
		i = encodeVarintNamaData(dAtA, i, uint64(m.PurchasedIn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintNamaData(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nama) > 0 {
		i -= len(m.Nama)
		copy(dAtA[i:], m.Nama)
		i = encodeVarintNamaData(dAtA, i, uint64(len(m.Nama)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NamaId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamaId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamaId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintNamaData(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TotalNama) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalNama) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalNama) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintNamaData(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NamaReserveCost) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NamaReserveCost) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NamaReserveCost) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintNamaData(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintNamaData(dAtA []byte, offset int, v uint64) int {
	offset -= sovNamaData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NamaAdmin) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovNamaData(uint64(l))
	}
	return n
}

func (m *NamaData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nama)
	if l > 0 {
		n += 1 + l + sovNamaData(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovNamaData(uint64(l))
	}
	if m.PurchasedIn != 0 {
		n += 1 + sovNamaData(uint64(m.PurchasedIn))
	}
	return n
}

func (m *NamaId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNamaData(uint64(m.Value))
	}
	return n
}

func (m *TotalNama) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNamaData(uint64(m.Value))
	}
	return n
}

func (m *NamaReserveCost) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 1 + sovNamaData(uint64(m.Value))
	}
	return n
}

func sovNamaData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNamaData(x uint64) (n int) {
	return sovNamaData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NamaAdmin) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamaAdmin: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamaAdmin: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNamaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNamaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamaData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamaData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamaData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nama", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNamaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nama = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNamaData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNamaData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchasedIn", wireType)
			}
			m.PurchasedIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchasedIn |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamaId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamaId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamaId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalNama) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalNama: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalNama: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NamaReserveCost) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNamaData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NamaReserveCost: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NamaReserveCost: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNamaData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNamaData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNamaData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNamaData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNamaData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNamaData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNamaData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNamaData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNamaData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNamaData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNamaData = fmt.Errorf("proto: unexpected end of group")
)
